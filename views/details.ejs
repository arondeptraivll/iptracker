<%- include('partials/header_vietnamese') %>

<nav>
    <ul><li><strong>IP Tracker</strong></li></ul>
    <ul>
      <li><a href="/dashboard" role="button" class="secondary">V·ªÅ B·∫£ng ƒëi·ªÅu khi·ªÉn</a></li>
      <li>
        <details role="list" dir="rtl">
          <summary aria-haspopup="listbox" role="link">
              <img src="<%= user.avatar %>" alt="Avatar" style="width: 32px; height: 32px; border-radius: 50%; vertical-align: middle;">
               <%= user.username %>
          </summary>
          <ul role="listbox">
            <li><a href="/auth/logout">ƒêƒÉng xu·∫•t</a></li>
          </ul>
        </details>
      </li>
    </ul>
</nav>

<hgroup>
    <h1>Chi ti·∫øt L∆∞·ª£t truy c·∫≠p</h1>
    <p>ID Thi·∫øt b·ªã: <code><%= visit.fingerprintId %></code> - Th·ªùi gian: <code><%= new Date(visit.timestamp).toLocaleString('vi-VN') %></code></p>
</hgroup>

<div id="tabs">
    <div role="tablist">
        <button role="tab" aria-selected="true" aria-controls="location-panel">Th√¥ng tin V·ªã tr√≠</button>
        <button role="tab" aria-selected="false" aria-controls="fp-panel">D·∫•u v√¢n tay Tr√¨nh duy·ªát</button>
    </div>
    
    <div role="tabpanel" id="location-panel">
        <% if (visit.latitude && visit.longitude) { %>
            <div class="toast success" style="margin-top: 0;">üìç <strong>V·ªã tr√≠ ch√≠nh x√°c t·ª´ GPS</strong> ƒë√£ ƒë∆∞·ª£c ghi l·∫°i.</div>
            <div id="location-info" style="margin: 1rem 0;">
                <!-- Th√¥ng tin chi ti·∫øt GPS s·∫Ω ƒë∆∞·ª£c th√™m v√†o ƒë√¢y b·∫±ng JavaScript sau khi API geocoding ch·∫°y -->
            </div>
        <% } else { %>
            <div class="toast" style="margin-top: 0;">‚ÑπÔ∏è <strong>V·ªã tr√≠ ∆∞·ªõc t√≠nh t·ª´ ƒë·ªãa ch·ªâ IP.</strong> Ng∆∞·ªùi d√πng kh√¥ng cung c·∫•p ho·∫∑c t·ª´ ch·ªëi chia s·∫ª v·ªã tr√≠ GPS.</div>
        <% } %>

        <!-- N∆†I HI·ªÇN TH·ªä TH√îNG TIN CHI TI·∫æT C·ª¶A C·∫¢ IP V√Ä GPS -->
        <div id="detailed-info-container" style="margin: 1rem 0;">
             <!-- N·ªôi dung s·∫Ω ƒë∆∞·ª£c ƒëi·ªÅn b·∫±ng JS -->
        </div>

        <div id="map-container" style="height: 400px; width: 100%; margin-top: 1rem; border-radius: var(--border-radius); background-color: var(--pico-muted-background-color);">
             <progress style="position: relative; top: 45%;"></progress>
        </div>
    </div>
    
    <div role="tabpanel" id="fp-panel" hidden>
        <!-- ... (Ph·∫ßn n√†y ƒë√£ ƒë√∫ng, kh√¥ng c·∫ßn s·ª≠a) ... -->
    </div>
</div>

<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"/>
<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>

<script>
    // --- SCRIPT CHO TAB V√Ä DOWNLOAD --- (Gi·ªØ nguy√™n, t√¥i s·∫Ω th√™m v√†o ƒë√¢y)
    const tabs = document.querySelectorAll('[role="tab"]');
    tabs.forEach(tab => {
        tab.addEventListener('click', (e) => {
            tabs.forEach(t => t.setAttribute('aria-selected', 'false'));
            const panelId = e.currentTarget.getAttribute('aria-controls');
            e.currentTarget.setAttribute('aria-selected', 'true');
            document.querySelectorAll('[role="tabpanel"]').forEach(p => p.hidden = true);
            document.getElementById(panelId).hidden = false;
        });
    });

    function downloadFingerprintComponents(event){
      event.preventDefault();
      const jsonData = <%- JSON.stringify(visit.fingerprintComponents, null, 2) %>;
      const blob = new Blob([JSON.stringify(jsonData, null, 2)], { type: 'application/json' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `fingerprint_details_<%= visit.fingerprintId %>.json`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
    }
    
    // --- H√ÄM HI·ªÇN TH·ªä MAP V√Ä TH√îNG TIN (S·ª¨A L·ªñI TRI·ªÜT ƒê·ªÇ) ---
    async function displayLocationData() {
        const mapContainer = document.getElementById('map-container');
        const infoContainer = document.getElementById('detailed-info-container');
        const hasGPS = <%- !!(visit.latitude && visit.longitude) %>;

        if (hasGPS) {
            // Tr∆∞·ªùng h·ª£p c√≥ GPS
            const lat = <%= visit.latitude %>;
            const lon = <%= visit.longitude %>;
            const accuracy = <%= visit.gpsAccuracy %>;

            infoContainer.innerHTML = `
                <ul>
                    <li><strong>Ngu·ªìn:</strong> GPS</li>
                    <li><strong>Vƒ© ƒë·ªô:</strong> <code>${lat}</code></li>
                    <li><strong>Kinh ƒë·ªô:</strong> <code>${lon}</code></li>
                    <li><strong>ƒê·ªô ch√≠nh x√°c:</strong> kho·∫£ng ${Math.round(accuracy)} m√©t</li>
                </ul>`;

            const map = L.map(mapContainer).setView([lat, lon], 16);
            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', { attribution: '¬© OpenStreetMap' }).addTo(map);
            L.marker([lat, lon]).addTo(map).bindPopup('V·ªã tr√≠ GPS c·ªßa thi·∫øt b·ªã').openPopup();
            L.circle([lat, lon], { radius: accuracy, color: '#1095c1', fillColor: '#1095c1', fillOpacity: 0.2 }).addTo(map);

        } else {
            // Tr∆∞·ªùng h·ª£p CH·ªà c√≥ IP, g·ªçi API
            infoContainer.innerHTML = `<progress></progress>`;
            try {
                const response = await fetch(`/ip-details/<%= visit.ipAddress %>`);
                const data = await response.json();
                if (data.status === 'success') {
                     infoContainer.innerHTML = `
                        <ul>
                            <li><strong>Ngu·ªìn:</strong> ƒê·ªãa ch·ªâ IP (<code>${visit.ipAddress}</code>)</li>
                            <li><strong>Qu·ªëc gia:</strong> ${data.country || 'N/A'} (${data.countryCode || 'N/A'})</li>
                            <li><strong>Th√†nh ph·ªë/V√πng:</strong> ${data.city || 'N/A'}, ${data.regionName || 'N/A'}</li>
                            <li><strong>ISP:</strong> ${data.isp || 'N/A'}</li>
                        </ul>`;
                    const map = L.map(mapContainer).setView([data.lat, data.lon], 13);
                    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', { attribution: '¬© OpenStreetMap' }).addTo(map);
                    L.marker([data.lat, data.lon]).addTo(map).bindPopup('V·ªã tr√≠ ∆∞·ªõc t√≠nh t·ª´ IP.').openPopup();
                } else {
                     mapContainer.innerHTML = `<p class="toast error">Kh√¥ng th·ªÉ t·∫£i b·∫£n ƒë·ªì v·ªã tr√≠ t·ª´ IP.</p>`;
                     infoContainer.innerHTML = '';
                }
            } catch (error) {
                mapContainer.innerHTML = `<p class="toast error">L·ªói t·∫£i d·ªØ li·ªáu v·ªã tr√≠.</p>`;
                infoContainer.innerHTML = '';
            }
        }
    }

    // Ch·∫°y h√†m ngay khi trang t·∫£i xong
    document.addEventListener('DOMContentLoaded', displayLocationData);
</script>

<%- include('partials/footer_vietnamese') %>
